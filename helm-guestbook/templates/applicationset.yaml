apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: guestbook-appset
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - pullRequest:
        github:
          # The GitHub organization or user.
          owner: stefan-dalecki
          # The Github repository
          repo: argocd-example-apps
          # Reference to a Secret containing an access token. (optional)
        requeueAfterSeconds: 1800
  template:
    metadata:
      name: "guestbook-{{ .branch }}-app"
      labels:
        app: { { template "helm-guestbook.name" . } }
        release: { { .Release.Name } }
    spec:
      project: default
      destination:
        server: https://kubernetes.default.svc
        namespace: argocd

      syncPolicy:
        # Automate drift correction
        automated:
          prune: true
          selfHeal: true
        # Create namespace if it does not exist
        syncPolicy:
        # Create namespace if it does not exist
        syncOptions:
          - CreateNamespace=true
          - DeleteNamespace=true
        managedNamespaceMetadata:
          labels:
            app.kubernetes.io/instance: guestbook-appset
---
apiVersion: v1
kind: Service
metadata:
  name: guestbook-{{ .Values.branch}}-svc
spec:
  type: ClusterIP
  ports:
    - port: 80
  selector:
    app: guestbook-{{ .Values.branch}}-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: { { template "helm-guestbook.name" . } }
  labels:
    app: { { template "helm-guestbook.name" . } }
    chart: { { template "helm-guestbook.chart" . } }
    release: { { .Release.Name } }
    heritage: { { .Release.Service } }
spec:
  replicas: { { .Values.replicaCount } }
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: { { template "helm-guestbook.name" . } }
      release: { { .Release.Name } }
  template:
    metadata:
      labels:
        app: { { template "helm-guestbook.name" . } }
        release: { { .Release.Name } }
    spec:
      containers:
        - name: { { .Chart.Name } }
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: { { .Values.image.pullPolicy } }
          ports:
            - name: http
              containerPort: { { .Values.containerPort } }
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
#           resources:
# {{ toYaml .Values.resources | indent 12 }}
#     {{- with .Values.nodeSelector }}
#       nodeSelector:
# {{ toYaml . | indent 8 }}
#     {{- end }}
#     {{- with .Values.affinity }}
#       affinity:
# {{ toYaml . | indent 8 }}
#     {{- end }}
#     {{- with .Values.tolerations }}
#       tolerations:
# {{ toYaml . | indent 8 }}
#     {{- end }}
